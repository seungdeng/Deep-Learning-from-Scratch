import math as m
import numpy as np
import pandas as pd
import matplotlib.pylab as plt




# =============================================================================
# def step_function2(x):
#     y = x>0
#     return y.astype(np.int64)
# 
# =============================================================================


# =============================================================================
# 
# x = np.array([-1.0,1.0,2.0])
# y = x>0
# print(y)
# 
# y = y.astype(np.int64)
# print(y)
# =============================================================================

# =============================================================================
# def step_function(x):
#     return np.array(x >0,dtype=np.int64)
#     
# x = np.arange(-5.0,5.0,0.1 )
# y = step_function(x)
# plt.plot(x,y)
# plt.ylim(-0.1, 1.1) #y축의 범위 지정
# plt.show()
# 
# 
# =============================================================================

def sigmoid(x):
    return 1/(1+np.exp(-x))

# =============================================================================
# x = np.arange(-5.0,5.0,0.1 )
# y = sigmoid(x)
# plt.plot(x,y)
# plt.ylim(-0.1,1.1)
# plt.show()
# 
# =============================================================================

# =============================================================================
# def relu(x):
#     return np.maximum(0,x)
# =============================================================================



# =============================================================================
# A = np.array([1,2,3,4]) #[1 2 3 4]
# print(np.ndim(A))       #1
# print(A.shape)          #(4, )
# print(A.shape[0])       #4
# =============================================================================
# =============================================================================
# 
# B = np.array([[1,2],[3,4],[5,6]])
# print(B)
# # =============================================================================
# # [[1 2]
# #  [3 4]
# #  [5 6]]
# # =============================================================================
# np.ndim(B)  #2
# B.shape     #(3, 2)
# =============================================================================



# =============================================================================
# X =np.array([1,2])
# X.shape     #(2, )
# W = np.array([[1,3,5],[2,4,6]])
# print(W)
# # [[1 3 5]
# #  [2 4 6]]
# W.shape     #(2,3)
# Y = np.dot(X,W)
# print(Y)    #[5 11 17]
# =============================================================================



# =============================================================================
# X = np.array([1.0,0.5])
# W1 = np.array([[0.1,0.3,0.5],[0.2,0.4,0.6]])
# B1 = np.array([0.1,0.2,0.3])
# 
# print(W1.shape) #(2, 3)
# print(X.shape)  #(2, )
# print(B1.shape) #(3, )
# 
# A1 = np.dot(X,W1) + B1
# 
# 
# =============================================================================

def identity_function(x):
    return x
# =============================================================================
# 
# W3 = np.array([[0.1,0.3],[0.2,0.4]])
# B3 = np.array([0.1,0.2])
# 
# A3 = np.dot(Z2,W3) + B3
# Y = identity_function(A3) #or Y = A3
# 
# =============================================================================

def init_network():
    network = {}
    network['W1'] = np.array([[0.1,0.3,0.5],[0.2,0.4,0.6]])
    network['b1'] = np.array([0.1,0.2,0.3])
    network['W2'] = np.array([[0.1,0.4],[0.2,0.5],[0.3,0.6]])
    network['b2'] = np.array([0.1,0.2])
    network['W3'] = np.array([[0.1,0.3],[0.2,0.4]])
    network['b3'] = np.array([0.1,0.2])

    return network

def forward(network,x):
    W1,W2,W3 = network['W1'], network['W2'], network['W3']
    b1,b2,b3 = network['b1'], network['b2'], network['b3']
    
    a1 = np.dot(x,W1) + b1
    z1 = sigmoid(a1)
    a2 = np.dot(z1,W2) + b2
    z2 = sigmoid(a2)
    a3 = np.dot(z2,W3) + b3
    y = identity_function(a3)
    
    return y

network = init_network()
x = np.array([1.0,0.5])
y = forward(network, x)
print(y) #[0.31682708 0.69627909]


# =============================================================================
# def softmax(a):
#     exp_a = np.exp(a)
#     sum_exp_a = np.sum(exp_a)
#     y = exp_a / sum_exp_a
#     return y
# 
# =============================================================================

def softmax(a):
    c = np.max(a)
    exp_a = np.exp(a - c) #prevent overflow
    sum_exp_a = np.sum(exp_a)
    y = exp_a / sum_exp_a
    return y



# =============================================================================
# x = np.array([[0.1,0.8,0.1],[0.3,0.1,0.6],[0.2,0.5,0.3],[0.8,0.1,0.1]])
# y = np.argmax(x,axis=1)
# print(y)
# 
# =============================================================================


# =============================================================================
# y = np.array([1,2,1,0])
# t = np.array([1,2,0,0])
# print(y==t)
# np.sum(y==t)
# 
# =============================================================================





























